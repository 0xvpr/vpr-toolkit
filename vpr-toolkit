#!/usr/bin/env python3

# Created by:       VPR
# Created:          May 6th, 2023

# Updated by:       VPR
# Updated:          December  6th, 2023

__author__  = "VPR"
__version__ = "1.0.1"

import subprocess
import argparse
import sys
import os

from pathlib import Path

from enum import Enum
from dataclasses import dataclass

from typing import Tuple

class ToolType(Enum):
    none         =  0
    binary       =  1
    script       =  2
    template     =  3

class BuildSystem(Enum):
    none         =  0 
    make         =  1
    cmake        =  2

@dataclass
class Tool(object):
    tool_type    : ToolType
    build_system : BuildSystem

    def __eq__(self, other):
        if isinstance(other, ToolType):
            return self.tool_type == other

        if isinstance(other, BuildSystem):
            return self.build_system == other

        return False

TOOLKIT = dict[str, Tool]({
    "vpr-shell-shock" : Tool( ToolType.template, BuildSystem.none  ),
    "vpr-omega-zero"  : Tool( ToolType.binary,   BuildSystem.cmake ),
    "vpr-overwatch"   : Tool( ToolType.binary,   BuildSystem.cmake ),
    "vpr-pidjeon"     : Tool( ToolType.binary,   BuildSystem.make  ),
    "vpr-extract"     : Tool( ToolType.binary,   BuildSystem.cmake ),
    "vpr-bin2fmt"     : Tool( ToolType.binary,   BuildSystem.cmake ),
    "vpr-midas"       : Tool( ToolType.binary,   BuildSystem.cmake ),
})

def check_installed(program: str) -> Tuple[bool, str]:
    """
    Check if a program is installed on the Unix system.

    Args:
    program (str):      The name of the program to check.

    Returns:
    Tuple[bool, str]:   A tuple containing a boolean indicating if the program
                        is installed, and a string with the version info or
                        error message.
    """

    try:
        result = subprocess.run(
            [program, "--version"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )

        return (True, result.stdout.strip())
    except subprocess.CalledProcessError as e:
        return (False, e.stderr.strip())

def download_tool(path: str, target: str) -> None:
    """
    Perform the download of a tool without installing or building.

    Args:
    path (str):         The directory to download the target tool. 
    target (str):       The name of the tool.

    Returns:
    None
    """

    rv = 0
    if not Path(f"{path}/{target}").exists():
        rv = os.system(f"git clone https://github.com/0xvpr/{target} {path}/{target}")
    else:
        rv = os.system(f"( cd {path}/{target} && git pull origin main )")
    if rv != 0:
        exit(1)

    return

def build_tool(path: str, target: str) -> None:
    """
    Perform the download of a tool and build using the appropriate build system.

    Args:
    path (str):         The directory to download and build the target tool. 
    target (str):       The name of the tool.

    Returns:
    None
    """

    if TOOLKIT[target] == ToolType.binary:
        download_tool(path, target)
    else:
        sys.stderr.write(f"Error: {target} is not a binary. Nothing to build.\n")
        exit(1)

    rv = 0
    if TOOLKIT[target] == BuildSystem.make:
        rv = os.system(f"make -C {path}/{target}")
    elif TOOLKIT[target] == BuildSystem.cmake:
        rv = os.system(f"( cd {path}/{target} && cmake -B build && cmake --build build )")
    if rv != 0:
        exit(1)

    return

def install_tool(path: str, target: str) -> None:
    """
    Perform the installation of the binary(ies) of a tool, adding the download files to path.

    Args:
    program (str):      The name of the program to check.

    Returns:
    Tuple[bool, str]:   A tuple containing a boolean indicating if the program
                        is installed, and a string with the version info or
                        error message.
    """

    rv = 0
    if TOOLKIT[target] == ToolType.binary or TOOLKIT[target] == ToolType.script:
        rv = os.system(f"curl -LJO --output-dir {path} $(curl -s https://api.github.com/repos/0xvpr/{target}/releases/latest | grep 'browser_download_url' | cut -d '\"' -f 4)")
    elif TOOLKIT[target] == ToolType.template:
        rv = os.system(f"git clone https://github.com/0xvpr/{target} {path}/{target}")

    if rv != 0:
        exit(1) # TODO message

    return

def build_all_tools(path: str) -> None:
    """
    Perform the download of all tools and install using the appropriate build system.

    Args:
    program (str):      The name of the program to check.

    Returns:
    Tuple[bool, str]:   A tuple containing a boolean indicating if the program
                        is installed, and a string with the version info or
                        error message.
    """

    for target, tool in TOOLKIT.items():
        print(tool)

        rv = 0
        if tool.tool_type == ToolType.binary:
            download_tool(path, target)

        if tool.build_system == BuildSystem.make:
            rv = os.system(f"make -C {path}/{target}")
        elif tool.build_system == BuildSystem.cmake:
            rv = os.system(
                f"( cd {path}/{target} && cmake -B build && cmake --build build )"
            )

        if rv != 0:
            exit(1)

    return

def install_all_tools(path: str) -> None:
    """
    Perform the installation of the binary(ies) of a tool, adding the download files to path.

    Args:
    program (str):      The name of the program to check.

    Returns:
    Tuple[bool, str]:   A tuple containing a boolean indicating if the program
                        is installed, and a string with the version info or
                        error message.
    """

    for tool, ( tool_type, _ ) in TOOLKIT:
        rv = 0
        # Download latest binaries
        if tool_type == ToolType.binary or tool == ToolType.script:
            rv = os.system(f"curl -LJO --output-dir {path} $(curl -s https://api.github.com/repos/0xvpr/{tool}/releases/latest | grep 'browser_download_url' | cut -d '\"' -f 4)")
        elif tool_type == ToolType.template:
            rv = os.system(f"git clone https://github.com/0xvpr/{tool} {path}/{tool}")

        if rv != 0:
            sys.stderr.write("") # TODO
            exit(1)

    return

def parse_args() -> argparse.Namespace:
    args = argparse.ArgumentParser()

    args.add_argument(
        "-v",
        "--version",
        dest="version",
        action="store_true",
        help=f"Display current version: {__version__}"
    )

    args.add_argument(
        "-p",
        "--toolkit-path",
        dest="toolkit_path",
        default="~/.vpr-toolkit",
        type=str,
        help="Path to install tools. (defaults to ~/.vpr-toolkit)"
    )

    args.add_argument(
        "-i",
        "--install",
        dest="installables",
        action="append",
        type=str,
        help="Download the target binary and install into toolkit-path."
    )

    args.add_argument(
        "-b",
        "--build",
        dest="buildables",
        action="append",
        type=str,
        help=f"Download and compile tool into target directory."
    )

    args.add_argument(
        "-d",
        "--download",
        dest="downloadables",
        action="append",
        type=str,
        help="Download tool from Github without compiling or installing."
    )

    args.add_argument(
        "--install-all",
        dest="install_all",
        action="store_true",
        default=False,
        help=""
    )

    args.add_argument(
        "--build-all",
        dest="build_all",
        action="store_true",
        default=False,
        help="Download and compile all tools into target directory."
    )

    args.add_argument(
        "--download-all",
        dest="download_all",
        action="store_true",
        default=True,
        help="Download all tools from Github without compiling."
    )

    return args.parse_args()

if __name__ == "__main__":
    required_binaries = [
        "git",
        "curl",
        "make",
        "cmake",
    ]

    for binary in required_binaries:
        found, err = check_installed(binary)
        if not found:
            sys.stderr.write(f"Error: {err}\n\nPlease install the latest version of {binary}.\n")
            exit(1)

    # Handle arguments
    args = parse_args()

    if args.version:
        sys.stderr.write(f"vpr-toolkit version: {__version__}\n")

    # Set toolkit dir
    toolkit_path = Path(args.toolkit_path)
    
    # Create toolkit directory
    if not toolkit_path.exists():
        sys.stderr.write(f"{toolkit_path} does not exist. Creating '{toolkit_path.absolute()}'...\n")
        os.mkdir(toolkit_path)

    # Builds
    if args.buildables:
        args.build_all = False

        for target in args.buildables:
            build_tool(args.toolkit_path, target)
    elif args.build_all:
        build_all_tools(args.toolkit_path)

    # Installs
    if args.installables:
        args.install_all = False

        for target in args.installables:
            install_tool(args.toolkit_path, target)
    elif args.install_all:
        install_all_tools(args.toolkit_path)

    # Downloads
    if args.downloadables:
        args.download_all = False

        for target in args.downloadables:
            download_tool(args.toolkit_path, target)
    elif args.download_all:
        ...
        # download_all_tools(args.toolkit_path)
